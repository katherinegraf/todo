{"ast":null,"code":"var _jsxFileName = \"/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { icon, library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { Tachyons } from 'tachyons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlibrary.add(fas);\n\nconst ExistingTasks = ({\n  existingTasks,\n  deleteTask,\n  completeTask,\n  loading\n}) => {\n  _s();\n\n  const [incompleteTasks, setIncompleteTasks] = useState(null);\n  const [completedTasks, setCompletedTasks] = useState(null);\n  const [cancelledTasks, setCancelledTasks] = useState(null);\n\n  if (loading) {\n    return 'xyz';\n  } // TODO is this where I should break out the existing tasks group into categories\n  // based on status state? no - would want that in fetchData.\n  // build new lists in fetchData, then return groups below\n  // could return all incomplete, followed by completed - faux sort\n\n\n  setCompletedTasks(existingTasks.map(task => {\n    if (task.status == 'complete') return task;\n  }));\n  console.log(completedTasks);\n\n  if (existingTasks && existingTasks.length > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"existing-tasks w-100\",\n        children: existingTasks.map(task => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-parent bt b--black-10\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"complete-btn\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                onClick: () => completeTask(task.id),\n                children: task.status === \"incomplete\" ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: \"check\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 47\n                }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: \"check-square\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 47\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: task.status === \"incomplete\" ? 'task-child w-90' : 'inactive-title task-child w-90',\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"delete-btn\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                onClick: () => deleteTask(task.id),\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: \"times\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n\n  return null;\n};\n\n_s(ExistingTasks, \"OmdDorNaMJptDv+gx/90GdYhPDY=\");\n\n_c = ExistingTasks;\nexport default ExistingTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingTasks\");","map":{"version":3,"sources":["/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js"],"names":["React","useState","icon","library","FontAwesomeIcon","fas","Tachyons","add","ExistingTasks","existingTasks","deleteTask","completeTask","loading","incompleteTasks","setIncompleteTasks","completedTasks","setCompletedTasks","cancelledTasks","setCancelledTasks","map","task","status","console","log","length","id","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,mCAA9B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,GAAT,QAAoB,mCAApB;AACA,SAASC,QAAT,QAAyB,UAAzB;;AAEAH,OAAO,CAACI,GAAR,CAAYF,GAAZ;;AAEA,MAAMG,aAAa,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,UAAjB;AAA6BC,EAAAA,YAA7B;AAA2CC,EAAAA;AAA3C,CAAD,KAA0D;AAAA;;AAE5E,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACc,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsCjB,QAAQ,CAAC,IAAD,CAApD;;AAEA,MAAIW,OAAJ,EAAa;AACT,WAAO,KAAP;AACH,GAR2E,CAU5E;AACA;AACQ;AACA;;;AAERI,EAAAA,iBAAiB,CAACP,aAAa,CAACU,GAAd,CAAmBC,IAAD,IAAU;AAC1C,QAAIA,IAAI,CAACC,MAAL,IAAe,UAAnB,EACQ,OAAOD,IAAP;AACP,GAHa,CAAD,CAAjB;AAKAE,EAAAA,OAAO,CAACC,GAAR,CAAYR,cAAZ;;AAEA,MAAIN,aAAa,IAAIA,aAAa,CAACe,MAAd,GAAuB,CAA5C,EAA+C;AAC3C,wBACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,kBACKf,aAAa,CAACU,GAAd,CAAmBC,IAAD,IAAU;AACzB,8BACI;AAAK,YAAA,SAAS,EAAC,4BAAf;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,qCACI;AACI,gBAAA,OAAO,EAAI,MAAMT,YAAY,CAACS,IAAI,CAACK,EAAN,CADjC;AAAA,0BAGKL,IAAI,CAACC,MAAL,KAAgB,YAAhB,gBACK,QAAC,eAAD;AAAiB,kBAAA,IAAI,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,wBADL,gBAEK,QAAC,eAAD;AAAiB,kBAAA,IAAI,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AALV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADJ,eAWI;AAAK,cAAA,SAAS,EACVD,IAAI,CAACC,MAAL,KAAgB,YAAhB,GACM,iBADN,GAEM,gCAHV;AAAA,wBAKMD,IAAI,CAACM;AALX;AAAA;AAAA;AAAA;AAAA,oBAXJ,eAkBI;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,qCACI;AACI,gBAAA,OAAO,EAAI,MAAMhB,UAAU,CAACU,IAAI,CAACK,EAAN,CAD/B;AAAA,uCAGI,QAAE,eAAF;AAAkB,kBAAA,IAAI,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AA4BH,SA7BA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAoCH;;AAED,SAAO,IAAP;AAEH,CA/DD;;GAAMjB,a;;KAAAA,a;AAiEN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react';\nimport { icon, library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { Tachyons } from 'tachyons';\n\nlibrary.add(fas)\n\nconst ExistingTasks = ({ existingTasks, deleteTask, completeTask, loading }) => {\n\n    const [incompleteTasks, setIncompleteTasks] = useState(null);\n    const [completedTasks, setCompletedTasks] = useState(null);\n    const [cancelledTasks, setCancelledTasks] = useState(null);\n\n    if (loading) {\n        return 'xyz';\n    }\n\n    // TODO is this where I should break out the existing tasks group into categories\n    // based on status state? no - would want that in fetchData.\n            // build new lists in fetchData, then return groups below\n            // could return all incomplete, followed by completed - faux sort\n\n    setCompletedTasks(existingTasks.map((task) => {\n        if (task.status == 'complete')\n                return task\n        }\n    ));\n    console.log(completedTasks)\n    \n    if (existingTasks && existingTasks.length > 0) {\n        return (\n            <div>\n                <div className='existing-tasks w-100'>\n                    {existingTasks.map((task) => {\n                        return (\n                            <div className='task-parent bt b--black-10'>\n                                <div className='complete-btn'>\n                                    <label\n                                        onClick = {() => completeTask(task.id)}\n                                    >\n                                        {task.status === \"incomplete\" \n                                            ? <FontAwesomeIcon icon=\"check\" />\n                                            : <FontAwesomeIcon icon=\"check-square\" />\n                                        }\n                                    </label>\n                                </div>\n                                <div className={\n                                    task.status === \"incomplete\"\n                                        ? 'task-child w-90'\n                                        : 'inactive-title task-child w-90'}\n                                >\n                                    { task.title }\n                                </div>\n                                <div className='delete-btn'>\n                                    <label\n                                        onClick = {() => deleteTask(task.id)}\n                                    >\n                                        < FontAwesomeIcon icon=\"times\" />\n                                    </label>\n                                </div>\n                            </div>        \n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n\n    return null;\n\n}\n\nexport default ExistingTasks;\n"]},"metadata":{},"sourceType":"module"}