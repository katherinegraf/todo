{"ast":null,"code":"var _jsxFileName = \"/Users/katherinegraf/code/todo/react-app/src/TaskManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ExistingTasks from './ExistingTasks';\nimport TaskCreate from './TaskCreate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskManager = () => {\n  _s();\n\n  const [existingTasks, setExistingTasks] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(false);\n  const [isActive, setActive] = useState(false); // TODO change from static id to variable once there's login functionality\n\n  const testUserId = 1;\n  const fetchUrl = \"http://localhost:2000/allTasksForUser/\" + testUserId; // NOTE Other methods are triggered by events; fetchData isn't and so requires useEffect to initialize the call.\n  // This is for loading the page with data before the user interacts with it.\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function fetchData() {\n    setLoading(true); // TODO once you can toggle between task types, use state to choose url\n\n    let req = await fetch(fetchUrl);\n\n    if (req.status < 400) {\n      let jsonData = await req.json(); // WIP/NOTES: below is idea from A on toggling task categories \n      // iterate through map of tasks and add to new lists based on status\n      // let allTasks = jsonData;\n      // let completedTasks = jsonData.map((task) => \n      //     if (task.status == 'complete')\n      //         return task\n      // )\n\n      setExistingTasks(jsonData);\n    } else {\n      setError(true);\n    }\n\n    setLoading(false);\n  }\n\n  const deleteUrl = \"//localhost:2000/deleteTask/\";\n\n  async function deleteTask(id) {\n    setLoading(true);\n    let url = deleteUrl + id;\n    let req = await fetch(url, {\n      method: 'DELETE'\n    });\n\n    if (req.status < 400) {\n      fetchData();\n    } else {\n      setError(true);\n    }\n\n    setLoading(false);\n  }\n\n  const toggleClass = () => {\n    setActive(!isActive);\n  };\n\n  const completeUrl = \"//localhost:2000/completeTask/\";\n\n  async function completeTask(id) {\n    setLoading(true);\n    let url = completeUrl + id;\n    let req = await fetch(url, {\n      method: 'PATCH'\n    });\n\n    if (req.status < 400) {\n      toggleClass();\n      fetchData();\n    } else {\n      setError(true);\n    }\n\n    setLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ExistingTasks, {\n      existingTasks: existingTasks,\n      deleteTask: deleteTask,\n      completeTask: completeTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskCreate, {\n      fetchData: fetchData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskManager, \"2E1A2Q8E9tjwC5D4UIuohUBFTlA=\");\n\n_c = TaskManager;\nexport default TaskManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"sources":["/Users/katherinegraf/code/todo/react-app/src/TaskManager.js"],"names":["React","useEffect","useState","ExistingTasks","TaskCreate","TaskManager","existingTasks","setExistingTasks","loading","setLoading","error","setError","isActive","setActive","testUserId","fetchUrl","fetchData","req","fetch","status","jsonData","json","deleteUrl","deleteTask","id","url","method","toggleClass","completeUrl","completeTask"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ExistingTasks from './ExistingTasks';\nimport TaskCreate from './TaskCreate';\n\nconst TaskManager = () => {\n\n    const [existingTasks, setExistingTasks] = useState(null);\n    const [loading, setLoading] = useState(null);\n    const [error, setError] = useState(false);\n    const [isActive, setActive] = useState(false);\n\n    // TODO change from static id to variable once there's login functionality\n    const testUserId = 1\n    const fetchUrl = \"http://localhost:2000/allTasksForUser/\" + testUserId;\n\n    // NOTE Other methods are triggered by events; fetchData isn't and so requires useEffect to initialize the call.\n    // This is for loading the page with data before the user interacts with it.\n    useEffect( () => {\n        fetchData();\n    }, [])\n\n    async function fetchData() {\n        setLoading(true);\n        // TODO once you can toggle between task types, use state to choose url\n        let req = await fetch(fetchUrl);\n        if (req.status < 400) {\n            let jsonData = await req.json();\n            // WIP/NOTES: below is idea from A on toggling task categories \n                // iterate through map of tasks and add to new lists based on status\n            // let allTasks = jsonData;\n            // let completedTasks = jsonData.map((task) => \n            //     if (task.status == 'complete')\n            //         return task\n            // )\n            setExistingTasks(jsonData);\n        } else {\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    const deleteUrl = \"//localhost:2000/deleteTask/\"\n\n    async function deleteTask(id) {\n        setLoading(true);\n        let url = deleteUrl + id\n        let req = await fetch(url, {\n            method: 'DELETE',\n        });\n        if (req.status < 400) {\n            fetchData();\n        } else {\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    const toggleClass = () => {\n        setActive(!isActive);\n    }\n\n    const completeUrl = \"//localhost:2000/completeTask/\"\n\n    async function completeTask(id) {\n        setLoading(true);\n        let url = completeUrl + id\n        let req = await fetch(url, {\n            method: 'PATCH',\n        });\n        if (req.status < 400) {\n            toggleClass();\n            fetchData();\n        } else {\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    return (\n        <div>\n            <ExistingTasks\n                existingTasks = { existingTasks }\n                deleteTask = { deleteTask }\n                completeTask = { completeTask }\n            />\n            <TaskCreate \n                fetchData = { fetchData }\n            />\n        </div>\n    )\n}\n\nexport default TaskManager;\n"]},"metadata":{},"sourceType":"module"}