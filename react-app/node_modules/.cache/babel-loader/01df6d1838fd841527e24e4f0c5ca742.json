{"ast":null,"code":"var _jsxFileName = \"/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { icon, library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlibrary.add(fas);\n\nconst ExistingTasks = () => {\n  _s();\n\n  // TODO:\n  // view all existing tasks\n  // deleteTask\n  // editTask\n  // title, collaborators\n  // completeTask \n  const [existingTasks, setExistingTasks] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    fetchData();\n  }, []); // TODO change from static url to variable user id\n\n  const fetchUrl = \"http://localhost:2000/allTasksForUser/1\";\n\n  async function fetchData() {\n    setLoading(true);\n    let req = await fetch(fetchUrl);\n\n    if (req.status < 400) {\n      let jsonData = await req.json();\n      setExistingTasks(jsonData); // console.log(existingTasks); \n      // console.log(jsonData); \n    } else {\n      setError(true);\n    }\n\n    setLoading(false);\n  }\n\n  const deleteUrl = \"http://localhost:2000/deleteTask/\";\n\n  async function deleteTask(id) {\n    console.log(id);\n    setLoading(true);\n    let url = deleteUrl + id;\n    console.log(url);\n    let req = await fetch(url);\n\n    if (req.status < 400) {\n      // TODO edit fetchData to only show active tasks\n      fetchData();\n    } else {\n      setError(true);\n    }\n\n    setLoading(false);\n  }\n\n  if (loading) {\n    return 'xyz';\n  }\n\n  if (existingTasks && existingTasks.length > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"existing-tasks\",\n      children: existingTasks.map(task => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-parent\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-title task-child\",\n            children: task.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"delete-btn task-child\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              onClick: () => deleteTask(task.id) // onClick = {() => fetchData()}\n              ,\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: \"trash\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n  return null;\n};\n\n_s(ExistingTasks, \"pWi+ErbA2anFebXdVsbk9JvN2so=\");\n\n_c = ExistingTasks;\nexport default ExistingTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingTasks\");","map":{"version":3,"sources":["/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js"],"names":["React","useEffect","useState","icon","library","FontAwesomeIcon","fas","add","ExistingTasks","existingTasks","setExistingTasks","loading","setLoading","error","setError","fetchData","fetchUrl","req","fetch","status","jsonData","json","deleteUrl","deleteTask","id","console","log","url","length","map","task","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { icon, library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fas)\n\nconst ExistingTasks = () => {\n    // TODO:\n    // view all existing tasks\n    // deleteTask\n    // editTask\n        // title, collaborators\n    // completeTask \n    \n    const [existingTasks, setExistingTasks] = useState(null);\n    const [loading, setLoading] = useState(null);\n    const [error, setError] = useState(false);\n\n    useEffect( () => {\n        fetchData();\n    }, [])\n\n    // TODO change from static url to variable user id\n    const fetchUrl = \"http://localhost:2000/allTasksForUser/1\";\n\n    async function fetchData() {\n        setLoading(true);\n        let req = await fetch(fetchUrl);\n        if (req.status < 400) {\n            let jsonData = await req.json();\n            setExistingTasks(jsonData);\n            // console.log(existingTasks); \n            // console.log(jsonData); \n        } else {\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    const deleteUrl = \"http://localhost:2000/deleteTask/\"\n\n    async function deleteTask(id) {\n        console.log(id)\n        setLoading(true);\n        let url = deleteUrl + id\n        console.log(url)\n        let req = await fetch(url);\n        if (req.status < 400) {\n            // TODO edit fetchData to only show active tasks\n            fetchData()\n        } else {\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    if (loading) {\n        return 'xyz';\n    }\n\n    if (existingTasks && existingTasks.length > 0) {\n        return (\n            <div className='existing-tasks'>\n                {existingTasks.map((task) => {\n                    return (\n                        <div className='task-parent'>\n                            <div className='task-title task-child'>\n                                { task.title }\n                            </div>\n                            <div className='delete-btn task-child'>\n                                <label\n                                    onClick = {() => deleteTask(task.id)}\n                                    // onClick = {() => fetchData()}\n\n                                >\n                                    < FontAwesomeIcon icon=\"trash\" />\n                                </label>\n                            </div>\n                        </div>        \n                    );\n                })}\n            </div>\n        );\n    }\n\n    return null;\n\n}\n\nexport default ExistingTasks;\n"]},"metadata":{},"sourceType":"module"}