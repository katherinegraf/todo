{"ast":null,"code":"var _jsxFileName = \"/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // const taskStub = [\n//     {\n//         id: 1,\n//         title: \"mow lawn\",\n//         collaborators: [],\n//         isCompleted: false,\n//     },\n//     {\n//         id: 2,\n//         title: \"do dishes\",\n//         collaborators: [],\n//         isCompleted: false\n//     },\n//     {\n//         id: 3,\n//         title: \"clean bathroom\",\n//         collaborators: [],\n//         isCompleted: false\n//     },\n// ];\n// const tasks = taskStub;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ExistingTasks = () => {\n  _s();\n\n  // TODO:\n  // view all existing tasks\n  // deleteTask\n  // editTask\n  // title, collaborators\n  // completeTask \n  const [existingTasks, setExistingTasks] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(null);\n  const url = \"localhost:2000/allTasksForUser/{id}\";\n\n  async function fetchData() {\n    let req = await fetch(url);\n    let resp = await req.json();\n    const {\n      existingTasks\n    } = resp;\n    setExistingTasks(existingTasks);\n    console.log(existingTasks);\n  }\n\n  const showTasks = () => {\n    return tasks.map(task => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"task\",\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }, this);\n    });\n  };\n\n  if (loading) {\n    return 'xyz';\n  } //const deleteTask = () => {\n  //    // delete task ... from list?\n  //}\n  //const completeTask = (id) => {\n  //    task = taskStub.\n  //}\n\n\n  return showTasks();\n};\n\n_s(ExistingTasks, \"WwbjS8dWBbrT9Uo6NpOQ/+C8U44=\");\n\n_c = ExistingTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingTasks\");","map":{"version":3,"sources":["/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js"],"names":["React","useState","ExistingTasks","existingTasks","setExistingTasks","loading","setLoading","error","setError","url","fetchData","req","fetch","resp","json","console","log","showTasks","tasks","map","task","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC/B;AACA;AACA;AACA;AACI;AACJ;AAEA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCH,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMQ,GAAG,GAAG,qCAAZ;;AAEA,iBAAeC,SAAf,GAA2B;AACvB,QAAIC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAD,CAArB;AACA,QAAII,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAjB;AACA,UAAM;AAAEX,MAAAA;AAAF,QAAoBU,IAA1B;AACAT,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYb,aAAZ;AACH;;AAED,QAAMc,SAAS,GAAG,MAAM;AACpB,WACIC,KAAK,CAACC,GAAN,CAAWC,IAAD,IAAU;AAChB,0BACQ;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,kBACMA,IAAI,CAACC;AADX;AAAA;AAAA;AAAA;AAAA,cADR;AAKH,KAND,CADJ;AASH,GAVD;;AAYA,MAAIhB,OAAJ,EAAa;AACT,WAAO,KAAP;AACH,GApC8B,CAsC/B;AACA;AACA;AAEA;AACA;AACA;;;AACA,SAAOY,SAAS,EAAhB;AACH,CA9CM;;GAAMf,a;;KAAAA,a","sourcesContent":["import React, { useState } from 'react';\n\n\n// const taskStub = [\n//     {\n//         id: 1,\n//         title: \"mow lawn\",\n//         collaborators: [],\n//         isCompleted: false,\n//     },\n//     {\n//         id: 2,\n//         title: \"do dishes\",\n//         collaborators: [],\n//         isCompleted: false\n//     },\n//     {\n//         id: 3,\n//         title: \"clean bathroom\",\n//         collaborators: [],\n//         isCompleted: false\n//     },\n// ];\n\n// const tasks = taskStub;\n\nexport const ExistingTasks = () => {\n    // TODO:\n    // view all existing tasks\n    // deleteTask\n    // editTask\n        // title, collaborators\n    // completeTask \n    \n    const [existingTasks, setExistingTasks] = useState(null);\n    const [loading, setLoading] = useState(null);\n    const [error, setError] = useState(null);\n\n    const url = \"localhost:2000/allTasksForUser/{id}\";\n\n    async function fetchData() {\n        let req = await fetch(url);\n        let resp = await req.json();\n        const { existingTasks } = resp;\n        setExistingTasks(existingTasks);\n        console.log(existingTasks);\n    }\n\n    const showTasks = () => {\n        return (\n            tasks.map((task) => {\n                return (\n                        <li className='task'>\n                            { task.title }\n                        </li>\n                );\n            })\n        );\n    };\n\n    if (loading) {\n        return 'xyz';\n    }\n\n    //const deleteTask = () => {\n    //    // delete task ... from list?\n    //}\n\n    //const completeTask = (id) => {\n    //    task = taskStub.\n    //}\n    return showTasks();\n}\n"]},"metadata":{},"sourceType":"module"}