{"ast":null,"code":"var _jsxFileName = \"/Users/katherinegraf/code/todo/react-app/src/TaskManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport ExistingTasks from './ExistingTasks';\nimport TaskCreate from './TaskCreate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskManager = () => {\n  _s();\n\n  const [existingTasks, setExistingTasks] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(false); // TODO change from static id to variable once there's login functionality\n\n  const testUserId = 1;\n  const fetchUrl = \"http://localhost:2000/allTasksForUser/\" + testUserId;\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function fetchData() {\n    setLoading(true); // TODO once you can toggle between task types, use state to choose url\n\n    let req = await fetch(fetchUrl);\n\n    if (req.status < 400) {\n      let jsonData = await req.json();\n      setExistingTasks(jsonData);\n    } else {\n      setError(true);\n    }\n\n    setLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ExistingTasks, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskCreate, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskManager, \"pWi+ErbA2anFebXdVsbk9JvN2so=\");\n\n_c = TaskManager;\nexport default TaskManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"sources":["/Users/katherinegraf/code/todo/react-app/src/TaskManager.js"],"names":["React","useEffect","ExistingTasks","TaskCreate","TaskManager","existingTasks","setExistingTasks","useState","loading","setLoading","error","setError","testUserId","fetchUrl","fetchData","req","fetch","status","jsonData","json"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAEtB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCC,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBF,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,KAAD,CAAlC,CAJsB,CAMtB;;AACA,QAAMK,UAAU,GAAG,CAAnB;AACA,QAAMC,QAAQ,GAAG,2CAA2CD,UAA5D;AAEAX,EAAAA,SAAS,CAAE,MAAM;AACba,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,SAAf,GAA2B;AACvBL,IAAAA,UAAU,CAAC,IAAD,CAAV,CADuB,CAEvB;;AACA,QAAIM,GAAG,GAAG,MAAMC,KAAK,CAACH,QAAD,CAArB;;AACA,QAAIE,GAAG,CAACE,MAAJ,GAAa,GAAjB,EAAsB;AAClB,UAAIC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAArB;AACAb,MAAAA,gBAAgB,CAACY,QAAD,CAAhB;AACH,KAHD,MAGO;AACHP,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,sBACI;AAAA,4BACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAjCD;;GAAML,W;;KAAAA,W;AAmCN,eAAeA,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport ExistingTasks from './ExistingTasks';\nimport TaskCreate from './TaskCreate';\n\nconst TaskManager = () => {\n\n    const [existingTasks, setExistingTasks] = useState(null);\n    const [loading, setLoading] = useState(null);\n    const [error, setError] = useState(false);\n\n    // TODO change from static id to variable once there's login functionality\n    const testUserId = 1\n    const fetchUrl = \"http://localhost:2000/allTasksForUser/\" + testUserId;\n\n    useEffect( () => {\n        fetchData();\n    }, [])\n\n    async function fetchData() {\n        setLoading(true);\n        // TODO once you can toggle between task types, use state to choose url\n        let req = await fetch(fetchUrl);\n        if (req.status < 400) {\n            let jsonData = await req.json();\n            setExistingTasks(jsonData);\n        } else {\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    return (\n        <div>\n            <ExistingTasks />\n            <TaskCreate />\n        </div>\n    )\n}\n\nexport default TaskManager;\n"]},"metadata":{},"sourceType":"module"}