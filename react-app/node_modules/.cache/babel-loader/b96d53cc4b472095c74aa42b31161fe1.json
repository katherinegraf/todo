{"ast":null,"code":"var _jsxFileName = \"/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { icon, library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { Tachyons } from 'tachyons';\nimport TaskCreate from './TaskCreate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlibrary.add(fas);\n\nconst ExistingTasks = () => {\n  _s();\n\n  const [existingTasks, setExistingTasks] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(false); // NOTE Other methods are triggered by events; fetchData isn't and so requires useEffect to initialize the call.\n  // This is for loading the page with the data before the user interacts with it.\n\n  useEffect(() => {\n    fetchData();\n  }, []); // TODO change from static id to variable once there's login functionality\n\n  const testUserId = 1;\n  const fetchUrl = \"http://localhost:2000/activeTasksForUser/\" + testUserId;\n\n  async function fetchData() {\n    setLoading(true); // TODO once you can toggle to all tasks, use that state to choose url to hit\n\n    let req = await fetch(fetchUrl);\n\n    if (req.status < 400) {\n      let jsonData = await req.json();\n      setExistingTasks(jsonData);\n    } else {\n      setError(true);\n    }\n\n    setLoading(false);\n  }\n\n  const deleteUrl = \"//localhost:2000/deleteTask/\";\n\n  async function deleteTask(id) {\n    setLoading(true);\n    let url = deleteUrl + id;\n    let req = await fetch(url, {\n      method: 'DELETE'\n    });\n\n    if (req.status < 400) {\n      fetchData();\n    } else {\n      setError(true);\n    }\n\n    setLoading(false);\n  }\n\n  if (loading) {\n    return 'xyz';\n  }\n\n  if (existingTasks && existingTasks.length > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"existing-tasks\",\n        children: existingTasks.map(task => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-parent ba b--gray\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-title task-child w-80\",\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"circle-btn task-child w-10\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: \"check\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"delete-btn task-child w-10\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                onClick: () => deleteTask(task.id),\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: \"trash\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), TaskCreate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  }\n\n  return null;\n};\n\n_s(ExistingTasks, \"pWi+ErbA2anFebXdVsbk9JvN2so=\");\n\n_c = ExistingTasks;\nexport default ExistingTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExistingTasks\");","map":{"version":3,"sources":["/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js"],"names":["React","useEffect","useState","icon","library","FontAwesomeIcon","fas","Tachyons","TaskCreate","add","ExistingTasks","existingTasks","setExistingTasks","loading","setLoading","error","setError","fetchData","testUserId","fetchUrl","req","fetch","status","jsonData","json","deleteUrl","deleteTask","id","url","method","length","map","task","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,mCAA9B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,GAAT,QAAoB,mCAApB;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEAJ,OAAO,CAACK,GAAR,CAAYH,GAAZ;;AAEA,MAAMI,aAAa,GAAG,MAAM;AAAA;;AAExB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,KAAD,CAAlC,CAJwB,CAMxB;AACA;;AACAD,EAAAA,SAAS,CAAE,MAAM;AACbgB,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT,CARwB,CAYxB;;AACA,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAMC,QAAQ,GAAG,8CAA8CD,UAA/D;;AAEA,iBAAeD,SAAf,GAA2B;AACvBH,IAAAA,UAAU,CAAC,IAAD,CAAV,CADuB,CAEvB;;AACA,QAAIM,GAAG,GAAG,MAAMC,KAAK,CAACF,QAAD,CAArB;;AACA,QAAIC,GAAG,CAACE,MAAJ,GAAa,GAAjB,EAAsB;AAClB,UAAIC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAArB;AACAZ,MAAAA,gBAAgB,CAACW,QAAD,CAAhB;AACH,KAHD,MAGO;AACHP,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,QAAMW,SAAS,GAAG,8BAAlB;;AAEA,iBAAeC,UAAf,CAA0BC,EAA1B,EAA8B;AAC1Bb,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAIc,GAAG,GAAGH,SAAS,GAAGE,EAAtB;AACA,QAAIP,GAAG,GAAG,MAAMC,KAAK,CAACO,GAAD,EAAM;AACvBC,MAAAA,MAAM,EAAE;AADe,KAAN,CAArB;;AAGA,QAAIT,GAAG,CAACE,MAAJ,GAAa,GAAjB,EAAsB;AAClBL,MAAAA,SAAS;AACZ,KAFD,MAEO;AACHD,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAED,MAAID,OAAJ,EAAa;AACT,WAAO,KAAP;AACH;;AAED,MAAIF,aAAa,IAAIA,aAAa,CAACmB,MAAd,GAAuB,CAA5C,EAA+C;AAC3C,wBACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,kBACKnB,aAAa,CAACoB,GAAd,CAAmBC,IAAD,IAAU;AACzB,8BACI;AAAK,YAAA,SAAS,EAAC,wBAAf;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC,4BAAf;AAAA,wBACMA,IAAI,CAACC;AADX;AAAA;AAAA;AAAA;AAAA,oBADJ,eAKI;AAAK,cAAA,SAAS,EAAC,4BAAf;AAAA,qCACI;AAAA,uCACI,QAAE,eAAF;AAAkB,kBAAA,IAAI,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBALJ,eAYI;AAAK,cAAA,SAAS,EAAC,4BAAf;AAAA,qCACI;AACI,gBAAA,OAAO,EAAI,MAAMP,UAAU,CAACM,IAAI,CAACL,EAAN,CAD/B;AAAA,uCAGI,QAAE,eAAF;AAAkB,kBAAA,IAAI,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAsBH,SAvBA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ,EAmCKnB,UAnCL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAuCH;;AAED,SAAO,IAAP;AAEH,CA7FD;;GAAME,a;;KAAAA,a;AA+FN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { icon, library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { Tachyons } from 'tachyons'\nimport TaskCreate from './TaskCreate';\n\nlibrary.add(fas)\n\nconst ExistingTasks = () => {\n    \n    const [existingTasks, setExistingTasks] = useState(null);\n    const [loading, setLoading] = useState(null);\n    const [error, setError] = useState(false);\n\n    // NOTE Other methods are triggered by events; fetchData isn't and so requires useEffect to initialize the call.\n    // This is for loading the page with the data before the user interacts with it.\n    useEffect( () => {\n        fetchData();\n    }, [])\n\n    // TODO change from static id to variable once there's login functionality\n    const testUserId = 1\n    const fetchUrl = \"http://localhost:2000/activeTasksForUser/\" + testUserId;\n\n    async function fetchData() {\n        setLoading(true);\n        // TODO once you can toggle to all tasks, use that state to choose url to hit\n        let req = await fetch(fetchUrl);\n        if (req.status < 400) {\n            let jsonData = await req.json();\n            setExistingTasks(jsonData);\n        } else {\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    const deleteUrl = \"//localhost:2000/deleteTask/\"\n\n    async function deleteTask(id) {\n        setLoading(true);\n        let url = deleteUrl + id\n        let req = await fetch(url, {\n            method: 'DELETE',\n        });\n        if (req.status < 400) {\n            fetchData()\n        } else {\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    if (loading) {\n        return 'xyz';\n    }\n\n    if (existingTasks && existingTasks.length > 0) {\n        return (\n            <div>\n                <div className='existing-tasks'>\n                    {existingTasks.map((task) => {\n                        return (\n                            <div className='task-parent ba b--gray'>\n                                <div className='task-title task-child w-80'>\n                                    { task.title }\n                                </div>\n                                {/* TODO add a button to complete a task */}\n                                <div className='circle-btn task-child w-10'>\n                                    <label>\n                                        < FontAwesomeIcon icon=\"check\" />\n                                        {/* TODO once check is clicked, change to check-circle */}\n                                        {/* TODO connect with backend to update status to completed */}\n                                    </label>\n                                </div>\n                                <div className='delete-btn task-child w-10'>\n                                    <label\n                                        onClick = {() => deleteTask(task.id)}\n                                    >\n                                        < FontAwesomeIcon icon=\"trash\" />\n                                    </label>\n                                </div>\n                            </div>        \n                        );\n                    })}\n                </div>\n                {/* <div className='task-create ba b--light-gray'>\n                    <form>\n                        <label for='createTask'>Add a task:</label>\n                        <input \n                            type='text'\n                        />\n                    </form>\n                </div> */}\n                {TaskCreate}\n            </div>\n        );\n    }\n\n    return null;\n\n}\n\nexport default ExistingTasks;\n"]},"metadata":{},"sourceType":"module"}