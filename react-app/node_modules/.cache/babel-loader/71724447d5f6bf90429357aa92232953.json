{"ast":null,"code":"var _jsxFileName = \"/Users/katherinegraf/code/todo/react-app/src/TaskCreate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskCreate = () => {\n  _s();\n\n  const [newTask, setNewTask] = useState(null);\n  const newTaskUrl = \"//localhost:2000/addTask\";\n\n  async function addNewTask(event) {\n    // if (event.charCode === 13 || event.key === \"Enter\") {\n    let task = event.target.value;\n    setNewTask(task);\n  }\n\n  async function submitNewTask() {\n    let formData = new FormData(); // let url = `${newTaskUrl}?=${newTask}`;\n    // console.log(url);\n\n    formData.append('title', newTask); // formData.append('title', 'please');\n    // console.log(formData.getAll['title']);\n    // console.log(formData['title']);\n\n    for (var key of formData.entries()) {\n      console.log(key[0] + ', ' + key[1]);\n    }\n\n    ;\n    let req = {\n      method: 'POST',\n      body: formData\n    };\n    console.log(req);\n    let resp = fetch(newTaskUrl, req);\n    console.log(resp.status);\n\n    if (resp.status < 400) {\n      console.log('successfully added');\n    } else {\n      console.log('failed to add');\n    }\n  } // TODO add project to Git\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-create ba b--light-gray\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      // TODO figure out syntax for below\n      // pass event as parameter below and in ln 15?\n      // but i don't use event\n      // submitNewTask() vs () = > submit...() vs no ()\n      // onSubmit= {submitNewTask()} >> adds null + every keystroke as new task\n      onSubmit: submitNewTask,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Add a task:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: event => addNewTask(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskCreate, \"UdeZFzVewSMAArgH0PVpSmuibSA=\");\n\n_c = TaskCreate;\nexport default TaskCreate;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCreate\");","map":{"version":3,"sources":["/Users/katherinegraf/code/todo/react-app/src/TaskCreate.js"],"names":["React","useState","TaskCreate","newTask","setNewTask","newTaskUrl","addNewTask","event","task","target","value","submitNewTask","formData","FormData","append","key","entries","console","log","req","method","body","resp","fetch","status"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAMI,UAAU,GAAG,0BAAnB;;AAEA,iBAAeC,UAAf,CAA2BC,KAA3B,EAAkC;AAC9B;AACI,QAAIC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAxB;AACAN,IAAAA,UAAU,CAACI,IAAD,CAAV;AACP;;AAED,iBAAeG,aAAf,GAAgC;AAC5B,QAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf,CAD4B,CAE5B;AACA;;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBX,OAAzB,EAJ4B,CAK5B;AACA;AACA;;AACA,SAAK,IAAIY,GAAT,IAAgBH,QAAQ,CAACI,OAAT,EAAhB,EAAoC;AACzCC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAAC,CAAD,CAAH,GAAS,IAAT,GAAgBA,GAAG,CAAC,CAAD,CAA/B;AACA;;AAAA;AACK,QAAII,GAAG,GAAG;AACNC,MAAAA,MAAM,EAAE,MADF;AAENC,MAAAA,IAAI,EAAET;AAFA,KAAV;AAIAK,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,QAAIG,IAAI,GAAGC,KAAK,CAAClB,UAAD,EAAac,GAAb,CAAhB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAI,CAACE,MAAjB;;AACA,QAAIF,IAAI,CAACE,MAAL,GAAc,GAAlB,EAAuB;AACnBP,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,KAFD,MAEO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH;AACJ,GAnCoB,CAqCrB;;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA,2BACI;AACI;AACA;AACI;AACJ;AACA;AACA,MAAA,QAAQ,EAAGP,aANf;AAAA,8BAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ,eASI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,QAAQ,EAAIJ,KAAD,IAAWD,UAAU,CAACC,KAAD;AAFpC;AAAA;AAAA;AAAA;AAAA,cATJ,eAaI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAoBH,CA3DH;;GAAML,U;;KAAAA,U;AA6DN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst TaskCreate = () => {\n\n    const [newTask, setNewTask] = useState(null);\n\n    const newTaskUrl = \"//localhost:2000/addTask\"\n\n    async function addNewTask (event) {\n        // if (event.charCode === 13 || event.key === \"Enter\") {\n            let task = event.target.value;\n            setNewTask(task);\n    }\n\n    async function submitNewTask () {\n        let formData = new FormData();\n        // let url = `${newTaskUrl}?=${newTask}`;\n        // console.log(url);\n        formData.append('title', newTask);\n        // formData.append('title', 'please');\n        // console.log(formData.getAll['title']);\n        // console.log(formData['title']);\n        for (var key of formData.entries()) {\n\t\t\tconsole.log(key[0] + ', ' + key[1])\n\t\t};\n        let req = {\n            method: 'POST',\n            body: formData,\n        }\n        console.log(req);\n        let resp = fetch(newTaskUrl, req);\n        console.log(resp.status);\n        if (resp.status < 400) {\n            console.log('successfully added')\n        } else {\n            console.log('failed to add');\n        }\n    }\n\n    // TODO add project to Git\n  \n      return (\n        <div className='task-create ba b--light-gray'>\n            <form\n                // TODO figure out syntax for below\n                // pass event as parameter below and in ln 15?\n                    // but i don't use event\n                // submitNewTask() vs () = > submit...() vs no ()\n                // onSubmit= {submitNewTask()} >> adds null + every keystroke as new task\n                onSubmit= {submitNewTask}\n            >\n                <label>Add a task:</label>\n                <input \n                    type='text'\n                    onChange= {(event) => addNewTask(event)}\n                />\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n      );\n\n  }\n  \nexport default TaskCreate;\n"]},"metadata":{},"sourceType":"module"}