[{"/Users/katherinegraf/code/todo/react-app/src/index.js":"1","/Users/katherinegraf/code/todo/react-app/src/settings.js":"2","/Users/katherinegraf/code/todo/react-app/src/TaskManager.js":"3","/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js":"4","/Users/katherinegraf/code/todo/react-app/src/TaskCreate.js":"5"},{"size":282,"mtime":1625066449620,"results":"6","hashOfConfig":"7"},{"size":27,"mtime":1621461414430,"results":"8","hashOfConfig":"9"},{"size":2491,"mtime":1630443527544,"results":"10","hashOfConfig":"7"},{"size":2765,"mtime":1625080024007,"results":"11","hashOfConfig":"7"},{"size":1395,"mtime":1625076105724,"results":"12","hashOfConfig":"7"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"16"},"1ksd69q",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"169deua",{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},"/Users/katherinegraf/code/todo/react-app/src/index.js",["27","28"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TaskManager from './TaskManager';\nimport ExistingTasks from './ExistingTasks';\nimport TaskCreate from './TaskCreate';\n\nReactDOM.render(\n  <TaskManager />,\n  document.getElementById('root')\n);\n",["29","30"],"/Users/katherinegraf/code/todo/react-app/src/settings.js",["31"],"/Users/katherinegraf/code/todo/react-app/src/TaskManager.js",["32","33","34","35"],"/Users/katherinegraf/code/todo/react-app/src/ExistingTasks.js",["36","37","38"],"import React, { useState } from 'react';\nimport { icon, library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { Tachyons } from 'tachyons';\n\nlibrary.add(fas)\n\nconst ExistingTasks = ({ existingTasks, deleteTask, completeTask, loading }) => {\n\n    // const [incompleteTasks, setIncompleteTasks] = useState(null);\n    // const [completedTasks, setCompletedTasks] = useState(null);\n    // const [cancelledTasks, setCancelledTasks] = useState(null);\n\n    if (loading) {\n        return 'xyz';\n    }\n\n    // TODO is this where I should break out the existing tasks group into categories\n    // based on status state? no - would want that in fetchData.\n            // build new lists in fetchData, then return groups below\n            // could return all incomplete, followed by completed - faux sort\n\n    if (existingTasks && existingTasks.length > 0) {\n        return (\n            <div>\n                <div className='existing-tasks w-100'>\n                    {existingTasks.map((task) => {\n                        return (\n                            <div className='task-parent bt b--black-10'>\n                                <div className='complete-btn'>\n                                    <label\n                                        onClick = {() => completeTask(task.id)}\n                                    >\n                                        {task.status === \"incomplete\" \n                                            ? <FontAwesomeIcon icon=\"check\" />\n                                            : <FontAwesomeIcon icon=\"check-square\" />\n                                        }\n                                    </label>\n                                </div>\n                                <div className={\n                                    task.status === \"incomplete\"\n                                        ? 'task-child w-90'\n                                        : 'inactive-title task-child w-90'}\n                                >\n                                    { task.title }\n                                </div>\n                                <div className='delete-btn'>\n                                    <label\n                                        onClick = {() => deleteTask(task.id)}\n                                    >\n                                        < FontAwesomeIcon icon=\"times\" />\n                                    </label>\n                                </div>\n                            </div>        \n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n\n    return null;\n\n}\n\nexport default ExistingTasks;\n","/Users/katherinegraf/code/todo/react-app/src/TaskCreate.js",["39","40"],"import React, { useState } from 'react';\nimport { Tachyons } from 'tachyons';\n\nconst TaskCreate = ({ fetchData }) => {\n\n    const [newTask, setNewTask] = useState(null);\n    const [inputValue, setInputValue] = useState(undefined);\n    const [error, setError] = useState(false);\n\n    const addTaskUrl = \"//localhost:2000/addTask\"\n\n    function addNewTask (event) {\n        setNewTask(event.target.value);\n    }\n\n    async function submitNewTask (event) {\n        let formData = new FormData();\n        formData.append('title', newTask);\n        let req = {\n            method: 'POST',\n            body: formData,\n        }\n        let resp = await fetch(addTaskUrl, req);\n        if (resp.status < 400) {\n            // console.log('successfully added');\n            setInputValue('');\n            fetchData();\n        } else {\n            setError(true);\n            // console.log('failed to add');\n        }\n    }\n\n    return (\n        <form>\n            <input \n                className='new-task w-30'\n                type='text'\n                placeholder='What do you need to do?'\n                value={ inputValue }\n                onChange= {(event) => addNewTask(event)}\n            />\n            <button \n                onClick= {(event) => submitNewTask(event)}\n            >\n                Submit\n            </button>\n        </form>\n    );\n\n  }\n  \nexport default TaskCreate;\n",{"ruleId":"41","severity":1,"message":"42","line":5,"column":8,"nodeType":"43","messageId":"44","endLine":5,"endColumn":21},{"ruleId":"41","severity":1,"message":"45","line":6,"column":8,"nodeType":"43","messageId":"44","endLine":6,"endColumn":18},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"41","severity":1,"message":"50","line":1,"column":8,"nodeType":"43","messageId":"44","endLine":1,"endColumn":13},{"ruleId":"41","severity":1,"message":"51","line":4,"column":10,"nodeType":"43","messageId":"44","endLine":4,"endColumn":18},{"ruleId":"41","severity":1,"message":"52","line":9,"column":12,"nodeType":"43","messageId":"44","endLine":9,"endColumn":19},{"ruleId":"41","severity":1,"message":"53","line":10,"column":12,"nodeType":"43","messageId":"44","endLine":10,"endColumn":17},{"ruleId":"54","severity":1,"message":"55","line":18,"column":8,"nodeType":"56","endLine":18,"endColumn":10,"suggestions":"57"},{"ruleId":"41","severity":1,"message":"58","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":25},{"ruleId":"41","severity":1,"message":"59","line":2,"column":10,"nodeType":"43","messageId":"44","endLine":2,"endColumn":14},{"ruleId":"41","severity":1,"message":"51","line":5,"column":10,"nodeType":"43","messageId":"44","endLine":5,"endColumn":18},{"ruleId":"41","severity":1,"message":"51","line":2,"column":10,"nodeType":"43","messageId":"44","endLine":2,"endColumn":18},{"ruleId":"41","severity":1,"message":"53","line":8,"column":12,"nodeType":"43","messageId":"44","endLine":8,"endColumn":17},"no-unused-vars","'ExistingTasks' is defined but never used.","Identifier","unusedVar","'TaskCreate' is defined but never used.","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"'React' is defined but never used.","'Tachyons' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["62"],"'useState' is defined but never used.","'icon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [fetchData]",{"range":"65","text":"66"},[585,587],"[fetchData]"]